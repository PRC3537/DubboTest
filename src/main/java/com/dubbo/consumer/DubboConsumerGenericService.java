package com.dubbo.consumer;import com.alibaba.dubbo.config.ApplicationConfig;import com.alibaba.dubbo.config.ReferenceConfig;import com.alibaba.dubbo.config.RegistryConfig;import com.alibaba.dubbo.config.utils.ReferenceConfigCache;import com.alibaba.dubbo.rpc.service.GenericService;import org.springframework.beans.factory.support.ManagedMap;import org.springframework.context.support.ClassPathXmlApplicationContext;import java.util.HashMap;import java.util.Map;/** * @program: dubboTestDemoOne * @description: 消费者 * @author: gonghuihui * @create: 2018-08-01 09:58 **/public class DubboConsumerGenericService {    public static void main(String[] args) {        /////////////////Spring泛化调用///////////        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(//                "spring-dubbo-consumer-generic.xml");//        context.start();////        GenericService easyCommonService = (GenericService) context.getBean("easyCommonService");//        Object result = easyCommonService.$invoke("helloService", new String[]{"java.lang.String"}, new Object[]{"hello"});//        System.out.println(result);        // 普通编码配置方式        ApplicationConfig application = new ApplicationConfig();        application.setName("bazinga-app");        // 连接配置中心配置        RegistryConfig registry = new RegistryConfig();        registry.setAddress("zookeeper://127.0.0.1:2181");//        registry.setAddress("zookeeper://192.168.5.243:2181");        ReferenceConfig<GenericService> reference = new ReferenceConfig<GenericService>();        reference.setApplication(application);        reference.setRegistry(registry);        reference.setInterface("com.dubbo.service.EasyCommonService");//        reference.setInterface("com.treefinance.basicservice.security.crypto.facade.ISecurityCryptoService");        reference.setGeneric(true);        ReferenceConfigCache cache = ReferenceConfigCache.getCache();        GenericService genericService = cache.get(reference);        // 基本类型以及Date,List,Map等不需要转换，直接调用        // 所以泛化调用的难点是组入参……        //        Object result = genericService.$invoke("helloService", new String[]{ "java.lang.String" },                new Object[] { "world" });//        Map<String, Object> paramMap = new HashMap<String, Object>();//        paramMap.put("String", "123");//        paramMap.put("EncryptionIntensityEnum", "NORMAL");//        Object result = genericService.$invoke("encrypt", new String[]{ "java.util.Map" },//                new Object[] { paramMap });        System.out.println(result);    }}